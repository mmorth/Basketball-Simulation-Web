package com.mattheworth.server;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;

@CrossOrigin(origins="*")
@Controller    // This means that this class is a Controller
@RequestMapping(path="/api/teams") // This means URL's start with /demo (after Application path)
public class TeamController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private TeamRepository teamRepository;

	// Creates a new team
	@RequestMapping(method = RequestMethod.POST) // Map ONLY GET Requests
	public @ResponseBody String createTeam(@RequestBody Team jsonTeam) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		teamRepository.save(jsonTeam);
		
//		Team team = new Team();
//		team.setName(name);
//		team.setOffensiveRating(offensiveRating);
//		team.setDefensiveRating(defensiveRating);
//		teamRepository.save(team);
		
		return "Team Created";
	}
	
	// Deletes a team
	@RequestMapping(path="/{id}", method = RequestMethod.DELETE)
	public @ResponseBody String deleteTeam(@PathVariable long id) {
		Team deleteTeam = teamRepository.findById(id).get();
		teamRepository.delete(deleteTeam);
		
		return "Team Deleted";
	}
	
	// Updates a team
	@RequestMapping(path="/{id}", method = RequestMethod.PUT)
	public @ResponseBody String updateTeam(@PathVariable long id, @RequestBody Team jsonTeam) {
		Team updateTeam = teamRepository.findById(id).get();
		
		updateTeam.setOffensiveRating(jsonTeam.getOffensiveRating());
		updateTeam.setDefensiveRating(jsonTeam.getDefensiveRating());
		teamRepository.save(updateTeam);
		
		return "Team Updated";
	}
	
	// Lists a specific team
	@RequestMapping(path="/{id}", method = RequestMethod.GET)
	public @ResponseBody Team getTeam(@PathVariable long id) {
		return teamRepository.findById(id).get();
	}
	
	// Lists all the teams
	@RequestMapping(method = RequestMethod.GET)
	public @ResponseBody Iterable<Team> getAllTeams() {
		// This returns a JSON or XML with the users
		return teamRepository.findAll();
	}
}
